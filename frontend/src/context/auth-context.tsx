import React from 'react';
import axios from 'axios';

interface AuthContextType {
  isAuthenticated: boolean;
  login: (username: string, password: string) => Promise<boolean>;
  logout: () => void;
}

const AuthContext = React.createContext<AuthContextType>({
  isAuthenticated: false,
  login: async () => false,
  logout: () => {},
});

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = React.useState<boolean>(() => {
    return localStorage.getItem('isAuthenticated') === 'true';
  });

  const login = async (username: string, password: string): Promise<boolean> => {
    try {
      const response = await axios.post(
          '/auth/login', // üëà –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –ø—Ä–æ–∫—Å–∏
          { username, password },
          {
            withCredentials: true, // üëà –≤–∞–∂–Ω–æ –¥–ª—è cookies (–µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –æ—Ç–¥–∞–µ—Ç jwt –∫–∞–∫ cookie)
            headers: { 'Content-Type': 'application/json' },
          }
      );

      if (response.status === 200) {
        setIsAuthenticated(true);
        localStorage.setItem('isAuthenticated', 'true');

        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω –≤ —Ç–µ–ª–µ –∏ —Ç—ã —Ö–æ—á–µ—à—å –µ–≥–æ —Ö—Ä–∞–Ω–∏—Ç—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω –≤ —Ç–µ–ª–µ –∏ —Ç—ã —Ö–æ—á–µ—à—å –µ–≥–æ —Ö—Ä–∞–Ω–∏—Ç—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if (response.data.token) {
          localStorage.setItem('token', response.data.token);
        }

        return true;
      }
    } catch (error) {
      console.error('Login failed:', error);
    }

    return false;
  };

  const logout = () => {
    setIsAuthenticated(false);
    localStorage.removeItem('isAuthenticated');
    localStorage.removeItem('token');
    // –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ logout, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç
  };

  return (
      <AuthContext.Provider value={{ isAuthenticated, login, logout }}>
        {children}
      </AuthContext.Provider>
  );
};

export const useAuth = () => React.useContext(AuthContext);
